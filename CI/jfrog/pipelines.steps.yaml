pipelines:
  - name: app_python
    configuration:
      environmentVariables:
        readOnly:
          myDockerRegistry: asgardian-docker.artifactory-eu-yannc3-0.soleng-emea-staging.jfrog.team:80
          pythonRepo: asgardian-python
          pythonPromoteRepo: asgardian-rc-python-local
    steps:
      - name: setup_env
        type: Bash
        configuration:
          affinityGroup: python
          runtime:
            type: host
        execution:
          onExecute:
            - sudo mkdir -p /etc/docker 
            - > 
              sudo jq -n  "{\"insecure-registries\": [\"${myDockerRegistry}\"]}" > /etc/docker/daemon.json
            - sudo systemctl restart docker
            - sudo cat /etc/docker/daemon.json
            - sudo systemctl status docker
      - name: build_app_python
        type: Bash
        configuration:
          affinityGroup: python
          runtime:
            type: image
            image:
              custom:
                registry: artifactory_eu
                name: ${myDockerRegistry}/continuumio/miniconda3
                tag: 4.7.12-jfrog
                sourceRepository: ${myDockerRegistry}
          inputSteps:
            - name: setup_env
          inputResources:
            - name: src_code_app_python
          outputResources:
            - name: bi_app_python
          integrations:
            - name: artifactory_eu
        execution:
          onStart:
            - export JFROG_CLI_BUILD_URL="${int_artifactory_eu_url/%artifactory/ui}/pipelines/myPipelines/${pipeline_name}/${run_number}/setup_env?branch=${res_src_code_app_python_branchName}"
            - cd ${res_src_code_app_python_resourcePath} && ls -l
            - git branch && git checkout refactor
            - chmod u+x scripts/build.sh scripts/init.sh
            - scripts/init.sh -r ${pythonRepo} -s artifactory_eu
            - scripts/build.sh -i ${pipeline_name} -n ${run_number} -t release -r ${pythonRepo} -a artifactory_eu -s ${int_artifactory_eu_url} -m python-module

      - name: scan_app_python
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: bi_app_python
              trigger: true
          #  outputResources:
          #     - name: scanned_python_BuildInfo
        execution:
          onStart:
            - echo ${int_artifactory_eu_url}/xray/api/v1/binMgr/builds
            - >
              curl -u${int_artifactory_eu_user}:${int_artifactory_eu_apiKey} -XPOST -H "Content-Type: application/json" -d "{\"names\":[\"${res_bi_app_python_buildName}\"]}" "${int_artifactory_eu_url}/xray/api/v1/binMgr/builds"

      - name: python_promote
        type: PromoteBuild
        configuration:
          targetRepository: ${pythonPromoteRepo}
          includeDependencies: false
          status: Passed
          comment: Artifact passed Xray Scan
          copy: false
          inputSteps:
            - name: scan_app_python
          inputResources:
            - name: bi_app_python
          outputResources:
            - name: pb_app_python
            - name: bi_app_python_promoted_staging
